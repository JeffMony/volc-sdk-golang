// Code Generated by gadget/xsdk, DO NOT EDIT

package dns

import (
	"bytes"
	"context"
	"encoding/json"
	"net/http"
)

// Group: Others
// 其他

func (c *Client) ListLines(ctx context.Context, data *ListLinesRequest) (*ListLinesResponse, error) {
	req, err := http.NewRequestWithContext(ctx, http.MethodGet, "/?Action=ListLines", nil)
	if err != nil {
		return nil, err
	}

	q := req.URL.Query()
	if v := data.PageSize; v != nil {
		q.Add("PageSize", *v)
	}
	if v := data.PageNumber; v != nil {
		q.Add("PageNumber", *v)
	}
	if v := data.Hierarchy; v != nil {
		q.Add("Hierarchy", *v)
	}
	req.URL.RawQuery = q.Encode()

	if v, ok := ctx.Value("K_LOGID").(string); ok {
		req.Header.Set("X-TT-LOGID", v)
	}

	resp, err := c.do(ctx, req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	var payload ListLinesResponse
	d := json.NewDecoder(resp.Body)
	if err := d.Decode(&payload); err != nil {
		return nil, err
	}
	return &payload, nil
}

func (c *Client) ListRecordAttributes(ctx context.Context, data *ListRecordAttributesRequest) (*ListRecordAttributesResponse, error) {
	req, err := http.NewRequestWithContext(ctx, http.MethodGet, "/?Action=ListRecordAttributes", nil)
	if err != nil {
		return nil, err
	}

	q := req.URL.Query()
	if v := data.ZID; v != nil {
		q.Add("ZID", *v)
	}
	req.URL.RawQuery = q.Encode()

	if v, ok := ctx.Value("K_LOGID").(string); ok {
		req.Header.Set("X-TT-LOGID", v)
	}

	resp, err := c.do(ctx, req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	var payload ListRecordAttributesResponse
	d := json.NewDecoder(resp.Body)
	if err := d.Decode(&payload); err != nil {
		return nil, err
	}
	return &payload, nil
}

// Group: Records
// 解析记录管理

func (c *Client) CreateRecord(ctx context.Context, data *CreateRecordRequest) (*CreateRecordResponse, error) {
	body, err := json.Marshal(data)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, http.MethodPost, "/?Action=CreateRecord", bytes.NewReader(body))
	if err != nil {
		return nil, err
	}

	if v, ok := ctx.Value("K_LOGID").(string); ok {
		req.Header.Set("X-TT-LOGID", v)
	}

	resp, err := c.do(ctx, req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	var payload CreateRecordResponse
	d := json.NewDecoder(resp.Body)
	if err := d.Decode(&payload); err != nil {
		return nil, err
	}
	return &payload, nil
}

func (c *Client) DeleteRecord(ctx context.Context, data *DeleteRecordRequest) error {
	body, err := json.Marshal(data)
	if err != nil {
		return err
	}

	req, err := http.NewRequestWithContext(ctx, http.MethodPost, "/?Action=DeleteRecord", bytes.NewReader(body))
	if err != nil {
		return err
	}

	if v, ok := ctx.Value("K_LOGID").(string); ok {
		req.Header.Set("X-TT-LOGID", v)
	}

	resp, err := c.do(ctx, req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	return nil
}

func (c *Client) ListRecordSets(ctx context.Context, data *ListRecordSetsRequest) (*ListRecordSetsResponse, error) {
	req, err := http.NewRequestWithContext(ctx, http.MethodGet, "/?Action=ListRecordSets", nil)
	if err != nil {
		return nil, err
	}

	q := req.URL.Query()
	if v := data.PageSize; v != nil {
		q.Add("PageSize", *v)
	}
	if v := data.PageNumber; v != nil {
		q.Add("PageNumber", *v)
	}
	if v := data.ZID; v != nil {
		q.Add("ZID", *v)
	}
	if v := data.Host; v != nil {
		q.Add("Host", *v)
	}
	if v := data.RecordSetID; v != nil {
		q.Add("RecordSetID", *v)
	}
	if v := data.SearchMode; v != nil {
		q.Add("SearchMode", *v)
	}
	req.URL.RawQuery = q.Encode()

	if v, ok := ctx.Value("K_LOGID").(string); ok {
		req.Header.Set("X-TT-LOGID", v)
	}

	resp, err := c.do(ctx, req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	var payload ListRecordSetsResponse
	d := json.NewDecoder(resp.Body)
	if err := d.Decode(&payload); err != nil {
		return nil, err
	}
	return &payload, nil
}

func (c *Client) ListRecords(ctx context.Context, data *ListRecordsRequest) (*ListRecordsResponse, error) {
	req, err := http.NewRequestWithContext(ctx, http.MethodGet, "/?Action=ListRecords", nil)
	if err != nil {
		return nil, err
	}

	q := req.URL.Query()
	if v := data.PageNumber; v != nil {
		q.Add("PageNumber", *v)
	}
	if v := data.Line; v != nil {
		q.Add("Line", *v)
	}
	if v := data.PageSize; v != nil {
		q.Add("PageSize", *v)
	}
	if v := data.Type; v != nil {
		q.Add("Type", *v)
	}
	if v := data.RecordSetID; v != nil {
		q.Add("RecordSetID", *v)
	}
	if v := data.ZID; v != nil {
		q.Add("ZID", *v)
	}
	if v := data.Value; v != nil {
		q.Add("Value", *v)
	}
	if v := data.SearchMode; v != nil {
		q.Add("SearchMode", *v)
	}
	if v := data.SearchOrder; v != nil {
		q.Add("SearchOrder", *v)
	}
	if v := data.Host; v != nil {
		q.Add("Host", *v)
	}
	req.URL.RawQuery = q.Encode()

	if v, ok := ctx.Value("K_LOGID").(string); ok {
		req.Header.Set("X-TT-LOGID", v)
	}

	resp, err := c.do(ctx, req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	var payload ListRecordsResponse
	d := json.NewDecoder(resp.Body)
	if err := d.Decode(&payload); err != nil {
		return nil, err
	}
	return &payload, nil
}

func (c *Client) QueryRecord(ctx context.Context, data *QueryRecordRequest) (*QueryRecordResponse, error) {
	req, err := http.NewRequestWithContext(ctx, http.MethodGet, "/?Action=QueryRecord", nil)
	if err != nil {
		return nil, err
	}

	q := req.URL.Query()
	if v := data.Value; v != nil {
		q.Add("Value", *v)
	}
	if v := data.Line; v != nil {
		q.Add("Line", *v)
	}
	if v := data.RecordID; v != nil {
		q.Add("RecordID", *v)
	}
	if v := data.Host; v != nil {
		q.Add("Host", *v)
	}
	if v := data.Type; v != nil {
		q.Add("Type", *v)
	}
	req.URL.RawQuery = q.Encode()

	if v, ok := ctx.Value("K_LOGID").(string); ok {
		req.Header.Set("X-TT-LOGID", v)
	}

	resp, err := c.do(ctx, req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	var payload QueryRecordResponse
	d := json.NewDecoder(resp.Body)
	if err := d.Decode(&payload); err != nil {
		return nil, err
	}
	return &payload, nil
}

func (c *Client) SyncFullRecords(ctx context.Context, data *SyncFullRecordsRequest) (*SyncFullRecordsResponse, error) {
	body, err := json.Marshal(data)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, http.MethodPost, "/?Action=SyncFullRecords", bytes.NewReader(body))
	if err != nil {
		return nil, err
	}

	if v, ok := ctx.Value("K_LOGID").(string); ok {
		req.Header.Set("X-TT-LOGID", v)
	}

	resp, err := c.do(ctx, req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	var payload SyncFullRecordsResponse
	d := json.NewDecoder(resp.Body)
	if err := d.Decode(&payload); err != nil {
		return nil, err
	}
	return &payload, nil
}

func (c *Client) UpdateRecord(ctx context.Context, data *UpdateRecordRequest) (*UpdateRecordResponse, error) {
	body, err := json.Marshal(data)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, http.MethodPost, "/?Action=UpdateRecord", bytes.NewReader(body))
	if err != nil {
		return nil, err
	}

	if v, ok := ctx.Value("K_LOGID").(string); ok {
		req.Header.Set("X-TT-LOGID", v)
	}

	resp, err := c.do(ctx, req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	var payload UpdateRecordResponse
	d := json.NewDecoder(resp.Body)
	if err := d.Decode(&payload); err != nil {
		return nil, err
	}
	return &payload, nil
}

func (c *Client) UpdateRecordSet(ctx context.Context, data *UpdateRecordSetRequest) (*UpdateRecordSetResponse, error) {
	body, err := json.Marshal(data)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, http.MethodPost, "/?Action=UpdateRecordSet", bytes.NewReader(body))
	if err != nil {
		return nil, err
	}

	if v, ok := ctx.Value("K_LOGID").(string); ok {
		req.Header.Set("X-TT-LOGID", v)
	}

	resp, err := c.do(ctx, req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	var payload UpdateRecordSetResponse
	d := json.NewDecoder(resp.Body)
	if err := d.Decode(&payload); err != nil {
		return nil, err
	}
	return &payload, nil
}

func (c *Client) UpdateRecordStatus(ctx context.Context, data *UpdateRecordStatusRequest) (*UpdateRecordStatusResponse, error) {
	body, err := json.Marshal(data)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, http.MethodPost, "/?Action=UpdateRecordStatus", bytes.NewReader(body))
	if err != nil {
		return nil, err
	}

	if v, ok := ctx.Value("K_LOGID").(string); ok {
		req.Header.Set("X-TT-LOGID", v)
	}

	resp, err := c.do(ctx, req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	var payload UpdateRecordStatusResponse
	d := json.NewDecoder(resp.Body)
	if err := d.Decode(&payload); err != nil {
		return nil, err
	}
	return &payload, nil
}

// Group: Stats
// 访问量统计

func (c *Client) ListDomainStatistics(ctx context.Context, data *ListDomainStatisticsRequest) (*ListDomainStatisticsResponse, error) {
	req, err := http.NewRequestWithContext(ctx, http.MethodGet, "/?Action=ListDomainStatistics", nil)
	if err != nil {
		return nil, err
	}

	q := req.URL.Query()
	if v := data.PageSize; v != nil {
		q.Add("PageSize", *v)
	}
	if v := data.ZID; v != nil {
		q.Add("ZID", *v)
	}
	if v := data.Name; v != nil {
		q.Add("Name", *v)
	}
	if v := data.SearchMode; v != nil {
		q.Add("SearchMode", *v)
	}
	if v := data.Start; v != nil {
		q.Add("Start", *v)
	}
	if v := data.End; v != nil {
		q.Add("End", *v)
	}
	if v := data.Threshold; v != nil {
		q.Add("Threshold", *v)
	}
	if v := data.PageNumber; v != nil {
		q.Add("PageNumber", *v)
	}
	req.URL.RawQuery = q.Encode()

	if v, ok := ctx.Value("K_LOGID").(string); ok {
		req.Header.Set("X-TT-LOGID", v)
	}

	resp, err := c.do(ctx, req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	var payload ListDomainStatisticsResponse
	d := json.NewDecoder(resp.Body)
	if err := d.Decode(&payload); err != nil {
		return nil, err
	}
	return &payload, nil
}

func (c *Client) ListZoneStatistics(ctx context.Context, data *ListZoneStatisticsRequest) (*ListZoneStatisticsResponse, error) {
	req, err := http.NewRequestWithContext(ctx, http.MethodGet, "/?Action=ListZoneStatistics", nil)
	if err != nil {
		return nil, err
	}

	q := req.URL.Query()
	if v := data.Start; v != nil {
		q.Add("Start", *v)
	}
	if v := data.End; v != nil {
		q.Add("End", *v)
	}
	if v := data.Threshold; v != nil {
		q.Add("Threshold", *v)
	}
	if v := data.PageNumber; v != nil {
		q.Add("PageNumber", *v)
	}
	if v := data.PageSize; v != nil {
		q.Add("PageSize", *v)
	}
	if v := data.SearchMode; v != nil {
		q.Add("SearchMode", *v)
	}
	if v := data.Name; v != nil {
		q.Add("Name", *v)
	}
	req.URL.RawQuery = q.Encode()

	if v, ok := ctx.Value("K_LOGID").(string); ok {
		req.Header.Set("X-TT-LOGID", v)
	}

	resp, err := c.do(ctx, req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	var payload ListZoneStatisticsResponse
	d := json.NewDecoder(resp.Body)
	if err := d.Decode(&payload); err != nil {
		return nil, err
	}
	return &payload, nil
}

func (c *Client) QueryDomainStatistics(ctx context.Context, data *QueryDomainStatisticsRequest) (QueryDomainStatisticsResponse, error) {
	req, err := http.NewRequestWithContext(ctx, http.MethodGet, "/?Action=QueryDomainStatistics", nil)
	if err != nil {
		return nil, err
	}

	q := req.URL.Query()
	if v := data.End; v != nil {
		q.Add("End", *v)
	}
	if v := data.ZID; v != nil {
		q.Add("ZID", *v)
	}
	if v := data.Name; v != nil {
		q.Add("Name", *v)
	}
	if v := data.Start; v != nil {
		q.Add("Start", *v)
	}
	req.URL.RawQuery = q.Encode()

	if v, ok := ctx.Value("K_LOGID").(string); ok {
		req.Header.Set("X-TT-LOGID", v)
	}

	resp, err := c.do(ctx, req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	var payload QueryDomainStatisticsResponse
	d := json.NewDecoder(resp.Body)
	if err := d.Decode(&payload); err != nil {
		return nil, err
	}
	return payload, nil
}

func (c *Client) QueryZoneStatistics(ctx context.Context, data *QueryZoneStatisticsRequest) (QueryZoneStatisticsResponse, error) {
	req, err := http.NewRequestWithContext(ctx, http.MethodGet, "/?Action=QueryZoneStatistics", nil)
	if err != nil {
		return nil, err
	}

	q := req.URL.Query()
	if v := data.Start; v != nil {
		q.Add("Start", *v)
	}
	if v := data.End; v != nil {
		q.Add("End", *v)
	}
	if v := data.ZID; v != nil {
		q.Add("ZID", *v)
	}
	req.URL.RawQuery = q.Encode()

	if v, ok := ctx.Value("K_LOGID").(string); ok {
		req.Header.Set("X-TT-LOGID", v)
	}

	resp, err := c.do(ctx, req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	var payload QueryZoneStatisticsResponse
	d := json.NewDecoder(resp.Body)
	if err := d.Decode(&payload); err != nil {
		return nil, err
	}
	return payload, nil
}

// Group: Trades
// 交易订单管理

func (c *Client) CalculatePrice(ctx context.Context, data *CalculatePriceRequest) (*CalculatePriceResponse, error) {
	req, err := http.NewRequestWithContext(ctx, http.MethodGet, "/?Action=CalculatePrice", nil)
	if err != nil {
		return nil, err
	}

	q := req.URL.Query()
	if v := data.InstanceID; v != nil {
		q.Add("InstanceID", *v)
	}
	if v := data.Times; v != nil {
		q.Add("Times", *v)
	}
	if v := data.CouponID; v != nil {
		q.Add("CouponID", *v)
	}
	if v := data.OrderType; v != nil {
		q.Add("OrderType", *v)
	}
	req.URL.RawQuery = q.Encode()

	if v, ok := ctx.Value("K_LOGID").(string); ok {
		req.Header.Set("X-TT-LOGID", v)
	}

	resp, err := c.do(ctx, req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	var payload CalculatePriceResponse
	d := json.NewDecoder(resp.Body)
	if err := d.Decode(&payload); err != nil {
		return nil, err
	}
	return &payload, nil
}

func (c *Client) CreateNewPreorder(ctx context.Context, data *CreateNewPreorderRequest) (*CreateNewPreorderResponse, error) {
	body, err := json.Marshal(data)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, http.MethodPost, "/?Action=CreateNewPreorder", bytes.NewReader(body))
	if err != nil {
		return nil, err
	}

	if v, ok := ctx.Value("K_LOGID").(string); ok {
		req.Header.Set("X-TT-LOGID", v)
	}

	resp, err := c.do(ctx, req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	var payload CreateNewPreorderResponse
	d := json.NewDecoder(resp.Body)
	if err := d.Decode(&payload); err != nil {
		return nil, err
	}
	return &payload, nil
}

func (c *Client) CreateRenewPreorder(ctx context.Context, data *CreateRenewPreorderRequest) (*CreateRenewPreorderResponse, error) {
	body, err := json.Marshal(data)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, http.MethodPost, "/?Action=CreateRenewPreorder", bytes.NewReader(body))
	if err != nil {
		return nil, err
	}

	if v, ok := ctx.Value("K_LOGID").(string); ok {
		req.Header.Set("X-TT-LOGID", v)
	}

	resp, err := c.do(ctx, req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	var payload CreateRenewPreorderResponse
	d := json.NewDecoder(resp.Body)
	if err := d.Decode(&payload); err != nil {
		return nil, err
	}
	return &payload, nil
}

func (c *Client) CreateTerminatePreorder(ctx context.Context, data *CreateTerminatePreorderRequest) (*CreateTerminatePreorderResponse, error) {
	body, err := json.Marshal(data)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, http.MethodPost, "/?Action=CreateTerminatePreorder", bytes.NewReader(body))
	if err != nil {
		return nil, err
	}

	if v, ok := ctx.Value("K_LOGID").(string); ok {
		req.Header.Set("X-TT-LOGID", v)
	}

	resp, err := c.do(ctx, req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	var payload CreateTerminatePreorderResponse
	d := json.NewDecoder(resp.Body)
	if err := d.Decode(&payload); err != nil {
		return nil, err
	}
	return &payload, nil
}

// Group: Zones
// 域名管理

func (c *Client) CreateZone(ctx context.Context, data *CreateZoneRequest) (*CreateZoneResponse, error) {
	body, err := json.Marshal(data)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, http.MethodPost, "/?Action=CreateZone", bytes.NewReader(body))
	if err != nil {
		return nil, err
	}

	if v, ok := ctx.Value("K_LOGID").(string); ok {
		req.Header.Set("X-TT-LOGID", v)
	}

	resp, err := c.do(ctx, req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	var payload CreateZoneResponse
	d := json.NewDecoder(resp.Body)
	if err := d.Decode(&payload); err != nil {
		return nil, err
	}
	return &payload, nil
}

func (c *Client) DeleteZone(ctx context.Context, data *DeleteZoneRequest) error {
	body, err := json.Marshal(data)
	if err != nil {
		return err
	}

	req, err := http.NewRequestWithContext(ctx, http.MethodPost, "/?Action=DeleteZone", bytes.NewReader(body))
	if err != nil {
		return err
	}

	if v, ok := ctx.Value("K_LOGID").(string); ok {
		req.Header.Set("X-TT-LOGID", v)
	}

	resp, err := c.do(ctx, req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	return nil
}

func (c *Client) ListZones(ctx context.Context, data *ListZonesRequest) (*ListZonesResponse, error) {
	req, err := http.NewRequestWithContext(ctx, http.MethodGet, "/?Action=ListZones", nil)
	if err != nil {
		return nil, err
	}

	q := req.URL.Query()
	if v := data.PageSize; v != nil {
		q.Add("PageSize", *v)
	}
	if v := data.PageNumber; v != nil {
		q.Add("PageNumber", *v)
	}
	if v := data.Key; v != nil {
		q.Add("Key", *v)
	}
	if v := data.SearchMode; v != nil {
		q.Add("SearchMode", *v)
	}
	req.URL.RawQuery = q.Encode()

	if v, ok := ctx.Value("K_LOGID").(string); ok {
		req.Header.Set("X-TT-LOGID", v)
	}

	resp, err := c.do(ctx, req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	var payload ListZonesResponse
	d := json.NewDecoder(resp.Body)
	if err := d.Decode(&payload); err != nil {
		return nil, err
	}
	return &payload, nil
}

func (c *Client) QueryZone(ctx context.Context, data *QueryZoneRequest) (*QueryZoneResponse, error) {
	req, err := http.NewRequestWithContext(ctx, http.MethodGet, "/?Action=QueryZone", nil)
	if err != nil {
		return nil, err
	}

	q := req.URL.Query()
	if v := data.ZIDrequired; v != nil {
		q.Add("ZID,required", *v)
	}
	req.URL.RawQuery = q.Encode()

	if v, ok := ctx.Value("K_LOGID").(string); ok {
		req.Header.Set("X-TT-LOGID", v)
	}

	resp, err := c.do(ctx, req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	var payload QueryZoneResponse
	d := json.NewDecoder(resp.Body)
	if err := d.Decode(&payload); err != nil {
		return nil, err
	}
	return &payload, nil
}

func (c *Client) UpdateZone(ctx context.Context, data *UpdateZoneRequest) (*UpdateZoneResponse, error) {
	body, err := json.Marshal(data)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, http.MethodPost, "/?Action=UpdateZone", bytes.NewReader(body))
	if err != nil {
		return nil, err
	}

	if v, ok := ctx.Value("K_LOGID").(string); ok {
		req.Header.Set("X-TT-LOGID", v)
	}

	resp, err := c.do(ctx, req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	var payload UpdateZoneResponse
	d := json.NewDecoder(resp.Body)
	if err := d.Decode(&payload); err != nil {
		return nil, err
	}
	return &payload, nil
}
