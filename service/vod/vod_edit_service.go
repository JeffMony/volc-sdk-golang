// Code generated by protoc-gen-volcengine-sdk
// source: VodEditService
// DO NOT EDIT!

package vod

import (
	"encoding/json"
	"net/http"
	"net/url"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/reflect/protoreflect"

	"github.com/pkg/errors"

	"github.com/volcengine/volc-sdk-golang/service/base/models/base"
	"github.com/volcengine/volc-sdk-golang/service/vod/models/request"
	"github.com/volcengine/volc-sdk-golang/service/vod/models/response"
)

// SubmitDirectEditTaskAsync
/*
 * @param *request.VodSubmitDirectEditTaskAsyncRequest
 * @return *response.VodSubmitDirectEditTaskAsyncResponse, int, error
 */
func (p *Vod) SubmitDirectEditTaskAsync(req *request.VodSubmitDirectEditTaskAsyncRequest) (*response.VodSubmitDirectEditTaskAsyncResponse, int, error) {
	reqMap := make(map[string]interface{})
	req.ProtoReflect().Range(func(descriptor protoreflect.FieldDescriptor, value protoreflect.Value) bool {
		if !value.IsValid() {
			return true
		}
		if descriptor.Name() != "EditParam" {
			reqMap[string(descriptor.Name())] = value.Interface()
		} else {
			reqMap[string(descriptor.Name())] = json.RawMessage(value.Bytes())
		}
		return true
	})
	jsonData, _ := json.Marshal(reqMap)
	respBody, status, err := p.Json("SubmitDirectEditTaskAsync", url.Values{}, string(jsonData))

	output := &response.VodSubmitDirectEditTaskAsyncResponse{}
	unmarshaler := protojson.UnmarshalOptions{
		DiscardUnknown: true,
	}
	errUnmarshal := unmarshaler.Unmarshal(respBody, output)
	if err != nil || status != http.StatusOK {
		// if exist http err,check whether the respBody's type is defined struct,
		// if it is ,
		// return struct,
		// otherwise return nil body
		// if httpCode is not 200,check whether the respBody's type is defined struct,
		// if it is ,
		// use errorCode as err and return struct,
		// otherwise use respBody string as error and return
		if errUnmarshal != nil || len(output.GetResponseMetadata().GetError().GetCode()) == 0 {
			if err == nil {
				err = errors.New(string(respBody))
			}
			return nil, status, err
		} else {
			return output, status, errors.New(output.GetResponseMetadata().GetError().GetCode())
		}
	}
	return output, status, nil
}

// GetDirectEditResult
/*
 * @param *request.VodGetDirectEditResultRequest
 * @return *response.VodGetDirectEditResultResponse, int, error
 */
func (p *Vod) GetDirectEditResult(req *request.VodGetDirectEditResultRequest) (*response.VodGetDirectEditResultResponse, int, error) {
	marshaler := protojson.MarshalOptions{
		Multiline:       false,
		AllowPartial:    false,
		UseProtoNames:   true,
		UseEnumNumbers:  false,
		EmitUnpopulated: false,
	}
	jsonData := marshaler.Format(req)
	respBody, status, err := p.Json("GetDirectEditResult", url.Values{}, jsonData)
	resultMap := struct {
		ResponseMetadata *base.ResponseMetadata
		Result           []map[string]interface{}
	}{}
	err = json.Unmarshal(respBody, &resultMap)
	if err != nil {
		return nil, status, errors.New(string(respBody))
	}
	for _, res := range resultMap.Result {
		if v, exist := res["EditParam"]; exist {
			tempStr, _ := json.Marshal(v)
			res["EditParam"] = tempStr
		}
	}
	jsonStr, _ := json.Marshal(resultMap)
	output := &response.VodGetDirectEditResultResponse{}
	unmarshaler := protojson.UnmarshalOptions{
		DiscardUnknown: true,
	}
	errUnmarshal := unmarshaler.Unmarshal(jsonStr, output)
	if err != nil || status != http.StatusOK {
		// if exist http err,check whether the respBody's type is defined struct,
		// if it is ,
		// return struct,
		// otherwise return nil body
		// if httpCode is not 200,check whether the respBody's type is defined struct,
		// if it is ,
		// use errorCode as err and return struct,
		// otherwise use respBody string as error and return
		if errUnmarshal != nil || len(output.GetResponseMetadata().GetError().GetCode()) == 0 {
			if err == nil {
				err = errors.New(string(respBody))
			}
			return nil, status, err
		} else {
			return output, status, errors.New(output.GetResponseMetadata().GetError().GetCode())
		}
	}
	return output, status, nil
}
