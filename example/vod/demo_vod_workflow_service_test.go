// Code generated by protoc-gen-volcengine-sdk
// source: VodWorkflowService
// DO NOT EDIT!

package vod

import (
	"fmt"
	"testing"

	"github.com/volcengine/volc-sdk-golang/base"
	"github.com/volcengine/volc-sdk-golang/service/vod"
	"github.com/volcengine/volc-sdk-golang/service/vod/models/request"
)

func Test_StartWorkflow(t *testing.T) {
	instance := vod.NewInstance()
	instance.SetCredential(base.Credentials{
		AccessKeyID:     "your ak",
		SecretAccessKey: "your sk",
	})

	query := &request.VodStartWorkflowRequest{
		Vid:               "your Vid",
		TemplateId:        "your TemplateId",
		Input:             nil,
		Priority:          0,
		CallbackArgs:      "your CallbackArgs",
		EnableLowPriority: false,
	}

	resp, status, err := instance.StartWorkflow(query)
	fmt.Println(status)
	fmt.Println(err)
	fmt.Println(resp.String())
}

func Test_RetrieveTranscodeResult(t *testing.T) {
	instance := vod.NewInstance()
	instance.SetCredential(base.Credentials{
		AccessKeyID:     "your ak",
		SecretAccessKey: "your sk",
	})

	query := &request.VodRetrieveTranscodeResultRequest{
		Vid:        "your Vid",
		ResultType: "your ResultType",
	}

	resp, status, err := instance.RetrieveTranscodeResult(query)
	fmt.Println(status)
	fmt.Println(err)
	fmt.Println(resp.String())
}

//查看任务流状态
func Test_GetWorkflowExecution(t *testing.T) {
	instance := vod.NewInstance()
	instance.SetCredential(base.Credentials{
		AccessKeyID:     "your ak",
		SecretAccessKey: "your sk",
	})
	runId := "your RunId"
	query := &request.VodGetWorkflowExecutionStatusRequest{
		RunId: runId,
	}
	resp2, code2, err2 := instance.GetWorkflowExecution(query)
	t.Logf("Test_GetWorkflowExecution resp is %s", resp2)
	if err2 != nil {
		t.Logf("code is %d\n", code2)
		t.Logf("err is %s\n", err2)
		t.Errorf("Test_GetWorkflowExecution err is not nil ,is %s", err2)
		t.Fail()
	}
	if code2 == 0 || code2 == 200 {
		t.Logf("geting workflowStatus success !")
	} else {
		t.Logf("failed, code is : %d", code2)
	}
}
