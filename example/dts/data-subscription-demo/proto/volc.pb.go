// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: volc.proto

package volc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EntryType int32

const (
	EntryType_UNKNOWN_ENTRY EntryType = 0
	EntryType_BEGIN         EntryType = 1
	EntryType_COMMIT        EntryType = 2
	EntryType_DML           EntryType = 3
	EntryType_DDL           EntryType = 4
)

// Enum value maps for EntryType.
var (
	EntryType_name = map[int32]string{
		0: "UNKNOWN_ENTRY",
		1: "BEGIN",
		2: "COMMIT",
		3: "DML",
		4: "DDL",
	}
	EntryType_value = map[string]int32{
		"UNKNOWN_ENTRY": 0,
		"BEGIN":         1,
		"COMMIT":        2,
		"DML":           3,
		"DDL":           4,
	}
)

func (x EntryType) Enum() *EntryType {
	p := new(EntryType)
	*p = x
	return p
}

func (x EntryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntryType) Descriptor() protoreflect.EnumDescriptor {
	return file_volc_proto_enumTypes[0].Descriptor()
}

func (EntryType) Type() protoreflect.EnumType {
	return &file_volc_proto_enumTypes[0]
}

func (x EntryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntryType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntryType(num)
	return nil
}

// Deprecated: Use EntryType.Descriptor instead.
func (EntryType) EnumDescriptor() ([]byte, []int) {
	return file_volc_proto_rawDescGZIP(), []int{0}
}

type SrcType int32

const (
	SrcType_UNKNOWN_SRC SrcType = 0
	SrcType_MySQL       SrcType = 1
	SrcType_PostgreSQL  SrcType = 2
)

// Enum value maps for SrcType.
var (
	SrcType_name = map[int32]string{
		0: "UNKNOWN_SRC",
		1: "MySQL",
		2: "PostgreSQL",
	}
	SrcType_value = map[string]int32{
		"UNKNOWN_SRC": 0,
		"MySQL":       1,
		"PostgreSQL":  2,
	}
)

func (x SrcType) Enum() *SrcType {
	p := new(SrcType)
	*p = x
	return p
}

func (x SrcType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SrcType) Descriptor() protoreflect.EnumDescriptor {
	return file_volc_proto_enumTypes[1].Descriptor()
}

func (SrcType) Type() protoreflect.EnumType {
	return &file_volc_proto_enumTypes[1]
}

func (x SrcType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SrcType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SrcType(num)
	return nil
}

// Deprecated: Use SrcType.Descriptor instead.
func (SrcType) EnumDescriptor() ([]byte, []int) {
	return file_volc_proto_rawDescGZIP(), []int{1}
}

type DMLType int32

const (
	DMLType_OTHER_DML DMLType = 0
	DMLType_INSERT    DMLType = 1
	DMLType_UPDATE    DMLType = 2
	DMLType_DELETE    DMLType = 3
)

// Enum value maps for DMLType.
var (
	DMLType_name = map[int32]string{
		0: "OTHER_DML",
		1: "INSERT",
		2: "UPDATE",
		3: "DELETE",
	}
	DMLType_value = map[string]int32{
		"OTHER_DML": 0,
		"INSERT":    1,
		"UPDATE":    2,
		"DELETE":    3,
	}
)

func (x DMLType) Enum() *DMLType {
	p := new(DMLType)
	*p = x
	return p
}

func (x DMLType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DMLType) Descriptor() protoreflect.EnumDescriptor {
	return file_volc_proto_enumTypes[2].Descriptor()
}

func (DMLType) Type() protoreflect.EnumType {
	return &file_volc_proto_enumTypes[2]
}

func (x DMLType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DMLType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DMLType(num)
	return nil
}

// Deprecated: Use DMLType.Descriptor instead.
func (DMLType) EnumDescriptor() ([]byte, []int) {
	return file_volc_proto_rawDescGZIP(), []int{2}
}

type DDLType int32

const (
	DDLType_OTHER_DDL        DDLType = 0
	DDLType_CREATE_TABLE     DDLType = 2
	DDLType_ALTER_TABLE      DDLType = 3
	DDLType_DROP_TABLE       DDLType = 4
	DDLType_RENAME_TABLE     DDLType = 5
	DDLType_TRUNCATE_TABLE   DDLType = 6
	DDLType_CREATE_VIEW      DDLType = 7
	DDLType_ALTER_VIEW       DDLType = 8
	DDLType_DROP_VIEW        DDLType = 9
	DDLType_CREATE_INDEX     DDLType = 10
	DDLType_DROP_INDEX       DDLType = 11
	DDLType_CREATE_FUNCTION  DDLType = 12
	DDLType_DROP_FUNCTION    DDLType = 13
	DDLType_CREATE_PROCEDURE DDLType = 14
	DDLType_DROP_PROCEDURE   DDLType = 15
)

// Enum value maps for DDLType.
var (
	DDLType_name = map[int32]string{
		0:  "OTHER_DDL",
		2:  "CREATE_TABLE",
		3:  "ALTER_TABLE",
		4:  "DROP_TABLE",
		5:  "RENAME_TABLE",
		6:  "TRUNCATE_TABLE",
		7:  "CREATE_VIEW",
		8:  "ALTER_VIEW",
		9:  "DROP_VIEW",
		10: "CREATE_INDEX",
		11: "DROP_INDEX",
		12: "CREATE_FUNCTION",
		13: "DROP_FUNCTION",
		14: "CREATE_PROCEDURE",
		15: "DROP_PROCEDURE",
	}
	DDLType_value = map[string]int32{
		"OTHER_DDL":        0,
		"CREATE_TABLE":     2,
		"ALTER_TABLE":      3,
		"DROP_TABLE":       4,
		"RENAME_TABLE":     5,
		"TRUNCATE_TABLE":   6,
		"CREATE_VIEW":      7,
		"ALTER_VIEW":       8,
		"DROP_VIEW":        9,
		"CREATE_INDEX":     10,
		"DROP_INDEX":       11,
		"CREATE_FUNCTION":  12,
		"DROP_FUNCTION":    13,
		"CREATE_PROCEDURE": 14,
		"DROP_PROCEDURE":   15,
	}
)

func (x DDLType) Enum() *DDLType {
	p := new(DDLType)
	*p = x
	return p
}

func (x DDLType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DDLType) Descriptor() protoreflect.EnumDescriptor {
	return file_volc_proto_enumTypes[3].Descriptor()
}

func (DDLType) Type() protoreflect.EnumType {
	return &file_volc_proto_enumTypes[3]
}

func (x DDLType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DDLType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DDLType(num)
	return nil
}

// Deprecated: Use DDLType.Descriptor instead.
func (DDLType) EnumDescriptor() ([]byte, []int) {
	return file_volc_proto_rawDescGZIP(), []int{3}
}

type ColumnType int32

const (
	ColumnType_UNKNOWN          ColumnType = 0
	ColumnType_STRING           ColumnType = 1
	ColumnType_BINARY           ColumnType = 2
	ColumnType_INTEGER          ColumnType = 3 // store as int64 value
	ColumnType_UNSIGNED_INTEGER ColumnType = 4 // store as  uint64 value
	ColumnType_FLOAT            ColumnType = 5 // store as float value
	ColumnType_DECIMAL          ColumnType = 6 // store as string value
	ColumnType_BOOL             ColumnType = 7
	ColumnType_DATETIME         ColumnType = 8 //store in string value in RFC3339Nano format
)

// Enum value maps for ColumnType.
var (
	ColumnType_name = map[int32]string{
		0: "UNKNOWN",
		1: "STRING",
		2: "BINARY",
		3: "INTEGER",
		4: "UNSIGNED_INTEGER",
		5: "FLOAT",
		6: "DECIMAL",
		7: "BOOL",
		8: "DATETIME",
	}
	ColumnType_value = map[string]int32{
		"UNKNOWN":          0,
		"STRING":           1,
		"BINARY":           2,
		"INTEGER":          3,
		"UNSIGNED_INTEGER": 4,
		"FLOAT":            5,
		"DECIMAL":          6,
		"BOOL":             7,
		"DATETIME":         8,
	}
)

func (x ColumnType) Enum() *ColumnType {
	p := new(ColumnType)
	*p = x
	return p
}

func (x ColumnType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColumnType) Descriptor() protoreflect.EnumDescriptor {
	return file_volc_proto_enumTypes[4].Descriptor()
}

func (ColumnType) Type() protoreflect.EnumType {
	return &file_volc_proto_enumTypes[4]
}

func (x ColumnType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ColumnType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ColumnType(num)
	return nil
}

// Deprecated: Use ColumnType.Descriptor instead.
func (ColumnType) EnumDescriptor() ([]byte, []int) {
	return file_volc_proto_rawDescGZIP(), []int{4}
}

type Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   *int32     `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Props     []*Prop    `protobuf:"bytes,2,rep,name=props" json:"props,omitempty"`
	SrcType   *SrcType   `protobuf:"varint,3,opt,name=src_type,json=srcType,enum=volc.SrcType" json:"src_type,omitempty"`
	EntryType *EntryType `protobuf:"varint,4,opt,name=entry_type,json=entryType,enum=volc.EntryType" json:"entry_type,omitempty"`
	Timestamp *int64     `protobuf:"varint,5,opt,name=timestamp" json:"timestamp,omitempty"`
	ServerId  *string    `protobuf:"bytes,6,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	Database  *string    `protobuf:"bytes,7,opt,name=database" json:"database,omitempty"`
	Table     *string    `protobuf:"bytes,8,opt,name=table" json:"table,omitempty"`
	// Types that are assignable to Event:
	//	*Entry_DmlEvent
	//	*Entry_DdlEvent
	//	*Entry_CommitEvent
	//	*Entry_BeginEvent
	Event isEntry_Event `protobuf_oneof:"event"`
}

func (x *Entry) Reset() {
	*x = Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entry) ProtoMessage() {}

func (x *Entry) ProtoReflect() protoreflect.Message {
	mi := &file_volc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entry.ProtoReflect.Descriptor instead.
func (*Entry) Descriptor() ([]byte, []int) {
	return file_volc_proto_rawDescGZIP(), []int{0}
}

func (x *Entry) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *Entry) GetProps() []*Prop {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *Entry) GetSrcType() SrcType {
	if x != nil && x.SrcType != nil {
		return *x.SrcType
	}
	return SrcType_UNKNOWN_SRC
}

func (x *Entry) GetEntryType() EntryType {
	if x != nil && x.EntryType != nil {
		return *x.EntryType
	}
	return EntryType_UNKNOWN_ENTRY
}

func (x *Entry) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *Entry) GetServerId() string {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return ""
}

func (x *Entry) GetDatabase() string {
	if x != nil && x.Database != nil {
		return *x.Database
	}
	return ""
}

func (x *Entry) GetTable() string {
	if x != nil && x.Table != nil {
		return *x.Table
	}
	return ""
}

func (m *Entry) GetEvent() isEntry_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *Entry) GetDmlEvent() *DMLEvent {
	if x, ok := x.GetEvent().(*Entry_DmlEvent); ok {
		return x.DmlEvent
	}
	return nil
}

func (x *Entry) GetDdlEvent() *DDLEvent {
	if x, ok := x.GetEvent().(*Entry_DdlEvent); ok {
		return x.DdlEvent
	}
	return nil
}

func (x *Entry) GetCommitEvent() *CommitEvent {
	if x, ok := x.GetEvent().(*Entry_CommitEvent); ok {
		return x.CommitEvent
	}
	return nil
}

func (x *Entry) GetBeginEvent() *BeginEvent {
	if x, ok := x.GetEvent().(*Entry_BeginEvent); ok {
		return x.BeginEvent
	}
	return nil
}

type isEntry_Event interface {
	isEntry_Event()
}

type Entry_DmlEvent struct {
	DmlEvent *DMLEvent `protobuf:"bytes,21,opt,name=dml_event,json=dmlEvent,oneof"`
}

type Entry_DdlEvent struct {
	DdlEvent *DDLEvent `protobuf:"bytes,22,opt,name=ddl_event,json=ddlEvent,oneof"`
}

type Entry_CommitEvent struct {
	CommitEvent *CommitEvent `protobuf:"bytes,23,opt,name=commit_event,json=commitEvent,oneof"`
}

type Entry_BeginEvent struct {
	BeginEvent *BeginEvent `protobuf:"bytes,24,opt,name=begin_event,json=beginEvent,oneof"`
}

func (*Entry_DmlEvent) isEntry_Event() {}

func (*Entry_DdlEvent) isEntry_Event() {}

func (*Entry_CommitEvent) isEntry_Event() {}

func (*Entry_BeginEvent) isEntry_Event() {}

type Prop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *Prop) Reset() {
	*x = Prop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prop) ProtoMessage() {}

func (x *Prop) ProtoReflect() protoreflect.Message {
	mi := &file_volc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prop.ProtoReflect.Descriptor instead.
func (*Prop) Descriptor() ([]byte, []int) {
	return file_volc_proto_rawDescGZIP(), []int{1}
}

func (x *Prop) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *Prop) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type BeginEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId *string `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
	File          *string `protobuf:"bytes,2,opt,name=file" json:"file,omitempty"`
	Offset        *string `protobuf:"bytes,3,opt,name=offset" json:"offset,omitempty"`
	Props         []*Prop `protobuf:"bytes,4,rep,name=props" json:"props,omitempty"`
}

func (x *BeginEvent) Reset() {
	*x = BeginEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeginEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginEvent) ProtoMessage() {}

func (x *BeginEvent) ProtoReflect() protoreflect.Message {
	mi := &file_volc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginEvent.ProtoReflect.Descriptor instead.
func (*BeginEvent) Descriptor() ([]byte, []int) {
	return file_volc_proto_rawDescGZIP(), []int{2}
}

func (x *BeginEvent) GetTransactionId() string {
	if x != nil && x.TransactionId != nil {
		return *x.TransactionId
	}
	return ""
}

func (x *BeginEvent) GetFile() string {
	if x != nil && x.File != nil {
		return *x.File
	}
	return ""
}

func (x *BeginEvent) GetOffset() string {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return ""
}

func (x *BeginEvent) GetProps() []*Prop {
	if x != nil {
		return x.Props
	}
	return nil
}

type CommitEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId *string `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
	File          *string `protobuf:"bytes,2,opt,name=file" json:"file,omitempty"`
	Offset        *string `protobuf:"bytes,3,opt,name=offset" json:"offset,omitempty"`
	Props         []*Prop `protobuf:"bytes,4,rep,name=props" json:"props,omitempty"`
}

func (x *CommitEvent) Reset() {
	*x = CommitEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitEvent) ProtoMessage() {}

func (x *CommitEvent) ProtoReflect() protoreflect.Message {
	mi := &file_volc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitEvent.ProtoReflect.Descriptor instead.
func (*CommitEvent) Descriptor() ([]byte, []int) {
	return file_volc_proto_rawDescGZIP(), []int{3}
}

func (x *CommitEvent) GetTransactionId() string {
	if x != nil && x.TransactionId != nil {
		return *x.TransactionId
	}
	return ""
}

func (x *CommitEvent) GetFile() string {
	if x != nil && x.File != nil {
		return *x.File
	}
	return ""
}

func (x *CommitEvent) GetOffset() string {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return ""
}

func (x *CommitEvent) GetProps() []*Prop {
	if x != nil {
		return x.Props
	}
	return nil
}

type DDLEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sql      *string  `protobuf:"bytes,1,opt,name=sql" json:"sql,omitempty"`
	ExecTime *int64   `protobuf:"varint,2,opt,name=exec_time,json=execTime" json:"exec_time,omitempty"` // unit: second
	ErrCode  *int32   `protobuf:"varint,3,opt,name=err_code,json=errCode" json:"err_code,omitempty"`
	Props    []*Prop  `protobuf:"bytes,4,rep,name=props" json:"props,omitempty"`
	Type     *DDLType `protobuf:"varint,5,opt,name=type,enum=volc.DDLType" json:"type,omitempty"`
}

func (x *DDLEvent) Reset() {
	*x = DDLEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DDLEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DDLEvent) ProtoMessage() {}

func (x *DDLEvent) ProtoReflect() protoreflect.Message {
	mi := &file_volc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DDLEvent.ProtoReflect.Descriptor instead.
func (*DDLEvent) Descriptor() ([]byte, []int) {
	return file_volc_proto_rawDescGZIP(), []int{4}
}

func (x *DDLEvent) GetSql() string {
	if x != nil && x.Sql != nil {
		return *x.Sql
	}
	return ""
}

func (x *DDLEvent) GetExecTime() int64 {
	if x != nil && x.ExecTime != nil {
		return *x.ExecTime
	}
	return 0
}

func (x *DDLEvent) GetErrCode() int32 {
	if x != nil && x.ErrCode != nil {
		return *x.ErrCode
	}
	return 0
}

func (x *DDLEvent) GetProps() []*Prop {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *DDLEvent) GetType() DDLType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return DDLType_OTHER_DDL
}

type DMLEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       *DMLType     `protobuf:"varint,1,opt,name=type,enum=volc.DMLType" json:"type,omitempty"`
	TableId    *string      `protobuf:"bytes,2,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	UseIndex   *Index       `protobuf:"bytes,3,opt,name=use_index,json=useIndex" json:"use_index,omitempty"`
	ColumnDefs []*ColumnDef `protobuf:"bytes,4,rep,name=column_defs,json=columnDefs" json:"column_defs,omitempty"`
	Rows       []*Row       `protobuf:"bytes,5,rep,name=rows" json:"rows,omitempty"`
	Props      []*Prop      `protobuf:"bytes,6,rep,name=props" json:"props,omitempty"`
}

func (x *DMLEvent) Reset() {
	*x = DMLEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DMLEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DMLEvent) ProtoMessage() {}

func (x *DMLEvent) ProtoReflect() protoreflect.Message {
	mi := &file_volc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DMLEvent.ProtoReflect.Descriptor instead.
func (*DMLEvent) Descriptor() ([]byte, []int) {
	return file_volc_proto_rawDescGZIP(), []int{5}
}

func (x *DMLEvent) GetType() DMLType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return DMLType_OTHER_DML
}

func (x *DMLEvent) GetTableId() string {
	if x != nil && x.TableId != nil {
		return *x.TableId
	}
	return ""
}

func (x *DMLEvent) GetUseIndex() *Index {
	if x != nil {
		return x.UseIndex
	}
	return nil
}

func (x *DMLEvent) GetColumnDefs() []*ColumnDef {
	if x != nil {
		return x.ColumnDefs
	}
	return nil
}

func (x *DMLEvent) GetRows() []*Row {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *DMLEvent) GetProps() []*Prop {
	if x != nil {
		return x.Props
	}
	return nil
}

type Index struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ColumnIndex []int32 `protobuf:"varint,2,rep,name=column_index,json=columnIndex" json:"column_index,omitempty"`
}

func (x *Index) Reset() {
	*x = Index{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Index) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Index) ProtoMessage() {}

func (x *Index) ProtoReflect() protoreflect.Message {
	mi := &file_volc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Index.ProtoReflect.Descriptor instead.
func (*Index) Descriptor() ([]byte, []int) {
	return file_volc_proto_rawDescGZIP(), []int{6}
}

func (x *Index) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Index) GetColumnIndex() []int32 {
	if x != nil {
		return x.ColumnIndex
	}
	return nil
}

type Row struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeforeCols []*Column `protobuf:"bytes,1,rep,name=before_cols,json=beforeCols" json:"before_cols,omitempty"`
	AfterCols  []*Column `protobuf:"bytes,2,rep,name=after_cols,json=afterCols" json:"after_cols,omitempty"`
}

func (x *Row) Reset() {
	*x = Row{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Row) ProtoMessage() {}

func (x *Row) ProtoReflect() protoreflect.Message {
	mi := &file_volc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Row.ProtoReflect.Descriptor instead.
func (*Row) Descriptor() ([]byte, []int) {
	return file_volc_proto_rawDescGZIP(), []int{7}
}

func (x *Row) GetBeforeCols() []*Column {
	if x != nil {
		return x.BeforeCols
	}
	return nil
}

func (x *Row) GetAfterCols() []*Column {
	if x != nil {
		return x.AfterCols
	}
	return nil
}

type ColumnDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Props      []*Prop     `protobuf:"bytes,1,rep,name=props" json:"props,omitempty"`
	Index      *int32      `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	Type       *ColumnType `protobuf:"varint,3,opt,name=type,enum=volc.ColumnType" json:"type,omitempty"`
	OriginType *string     `protobuf:"bytes,4,opt,name=origin_type,json=originType" json:"origin_type,omitempty"`
	Name       *string     `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Charset    *string     `protobuf:"bytes,6,opt,name=charset" json:"charset,omitempty"`
	IsNullable *bool       `protobuf:"varint,7,opt,name=is_nullable,json=isNullable" json:"is_nullable,omitempty"`
	IsUnsigned *bool       `protobuf:"varint,8,opt,name=is_unsigned,json=isUnsigned" json:"is_unsigned,omitempty"`
}

func (x *ColumnDef) Reset() {
	*x = ColumnDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnDef) ProtoMessage() {}

func (x *ColumnDef) ProtoReflect() protoreflect.Message {
	mi := &file_volc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnDef.ProtoReflect.Descriptor instead.
func (*ColumnDef) Descriptor() ([]byte, []int) {
	return file_volc_proto_rawDescGZIP(), []int{8}
}

func (x *ColumnDef) GetProps() []*Prop {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *ColumnDef) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *ColumnDef) GetType() ColumnType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ColumnType_UNKNOWN
}

func (x *ColumnDef) GetOriginType() string {
	if x != nil && x.OriginType != nil {
		return *x.OriginType
	}
	return ""
}

func (x *ColumnDef) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ColumnDef) GetCharset() string {
	if x != nil && x.Charset != nil {
		return *x.Charset
	}
	return ""
}

func (x *ColumnDef) GetIsNullable() bool {
	if x != nil && x.IsNullable != nil {
		return *x.IsNullable
	}
	return false
}

func (x *ColumnDef) GetIsUnsigned() bool {
	if x != nil && x.IsUnsigned != nil {
		return *x.IsUnsigned
	}
	return false
}

type Column struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsNull *bool `protobuf:"varint,1,opt,name=is_null,json=isNull" json:"is_null,omitempty"`
	// Types that are assignable to Value:
	//	*Column_StringValue
	//	*Column_BinaryValue
	//	*Column_FloatValue
	//	*Column_Int64Value
	//	*Column_Uint64Value
	//	*Column_BoolValue
	Value isColumn_Value `protobuf_oneof:"value"`
}

func (x *Column) Reset() {
	*x = Column{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Column) ProtoMessage() {}

func (x *Column) ProtoReflect() protoreflect.Message {
	mi := &file_volc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Column.ProtoReflect.Descriptor instead.
func (*Column) Descriptor() ([]byte, []int) {
	return file_volc_proto_rawDescGZIP(), []int{9}
}

func (x *Column) GetIsNull() bool {
	if x != nil && x.IsNull != nil {
		return *x.IsNull
	}
	return false
}

func (m *Column) GetValue() isColumn_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Column) GetStringValue() string {
	if x, ok := x.GetValue().(*Column_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *Column) GetBinaryValue() []byte {
	if x, ok := x.GetValue().(*Column_BinaryValue); ok {
		return x.BinaryValue
	}
	return nil
}

func (x *Column) GetFloatValue() float64 {
	if x, ok := x.GetValue().(*Column_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *Column) GetInt64Value() int64 {
	if x, ok := x.GetValue().(*Column_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (x *Column) GetUint64Value() uint64 {
	if x, ok := x.GetValue().(*Column_Uint64Value); ok {
		return x.Uint64Value
	}
	return 0
}

func (x *Column) GetBoolValue() bool {
	if x, ok := x.GetValue().(*Column_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

type isColumn_Value interface {
	isColumn_Value()
}

type Column_StringValue struct {
	StringValue string `protobuf:"bytes,2,opt,name=string_value,json=stringValue,oneof"`
}

type Column_BinaryValue struct {
	BinaryValue []byte `protobuf:"bytes,3,opt,name=binary_value,json=binaryValue,oneof"`
}

type Column_FloatValue struct {
	FloatValue float64 `protobuf:"fixed64,4,opt,name=float_value,json=floatValue,oneof"`
}

type Column_Int64Value struct {
	Int64Value int64 `protobuf:"varint,5,opt,name=int64_value,json=int64Value,oneof"`
}

type Column_Uint64Value struct {
	Uint64Value uint64 `protobuf:"varint,6,opt,name=uint64_value,json=uint64Value,oneof"`
}

type Column_BoolValue struct {
	BoolValue bool `protobuf:"varint,7,opt,name=bool_value,json=boolValue,oneof"`
}

func (*Column_StringValue) isColumn_Value() {}

func (*Column_BinaryValue) isColumn_Value() {}

func (*Column_FloatValue) isColumn_Value() {}

func (*Column_Int64Value) isColumn_Value() {}

func (*Column_Uint64Value) isColumn_Value() {}

func (*Column_BoolValue) isColumn_Value() {}

var File_volc_proto protoreflect.FileDescriptor

var file_volc_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x76, 0x6f,
	0x6c, 0x63, 0x22, 0xde, 0x03, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x76, 0x6f, 0x6c, 0x63, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x28, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x76, 0x6f, 0x6c,
	0x63, 0x2e, 0x53, 0x72, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x72, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x76, 0x6f, 0x6c, 0x63, 0x2e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x2d, 0x0a, 0x09, 0x64, 0x6d, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x6f, 0x6c, 0x63, 0x2e, 0x44, 0x4d, 0x4c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x64, 0x6d, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d,
	0x0a, 0x09, 0x64, 0x64, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x6f, 0x6c, 0x63, 0x2e, 0x44, 0x44, 0x4c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x08, 0x64, 0x64, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x6c, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x0b, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x6f, 0x6c,
	0x63, 0x2e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x22, 0x2e, 0x0a, 0x04, 0x50, 0x72, 0x6f, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x0a, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x76, 0x6f, 0x6c, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x05, 0x70, 0x72,
	0x6f, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x76, 0x6f, 0x6c, 0x63,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x22, 0x99, 0x01, 0x0a,
	0x08, 0x44, 0x44, 0x4c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x71, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x71, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x65,
	0x78, 0x65, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x65, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x76, 0x6f, 0x6c, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x52, 0x05,
	0x70, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x76, 0x6f, 0x6c, 0x63, 0x2e, 0x44, 0x44, 0x4c, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xe5, 0x01, 0x0a, 0x08, 0x44, 0x4d, 0x4c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x76, 0x6f, 0x6c, 0x63, 0x2e, 0x44, 0x4d, 0x4c, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x6f, 0x6c, 0x63, 0x2e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x08, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x30, 0x0a,
	0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x6f, 0x6c, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x44, 0x65, 0x66, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66, 0x73, 0x12,
	0x1d, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x76, 0x6f, 0x6c, 0x63, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x20,
	0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x76, 0x6f, 0x6c, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73,
	0x22, 0x3e, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0x61, 0x0a, 0x03, 0x52, 0x6f, 0x77, 0x12, 0x2d, 0x0a, 0x0b, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76,
	0x6f, 0x6c, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x0a, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x43, 0x6f, 0x6c, 0x73, 0x12, 0x2b, 0x0a, 0x0a, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x6f, 0x6c,
	0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x09, 0x61, 0x66, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6c, 0x73, 0x22, 0xfa, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65,
	0x66, 0x12, 0x20, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x76, 0x6f, 0x6c, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x52, 0x05, 0x70, 0x72,
	0x6f, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x76, 0x6f, 0x6c, 0x63, 0x2e, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x22, 0x80, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x73, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73,
	0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x0b, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21,
	0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f,
	0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x2a, 0x47, 0x0a, 0x09, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x4e, 0x54, 0x52,
	0x59, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x4d,
	0x4c, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x44, 0x4c, 0x10, 0x04, 0x2a, 0x35, 0x0a, 0x07,
	0x53, 0x72, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x53, 0x52, 0x43, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x79, 0x53, 0x51,
	0x4c, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x53, 0x51,
	0x4c, 0x10, 0x02, 0x2a, 0x3c, 0x0a, 0x07, 0x44, 0x4d, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d,
	0x0a, 0x09, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x44, 0x4d, 0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x03, 0x2a, 0x95, 0x02, 0x0a, 0x07, 0x44, 0x44, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a,
	0x09, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x44, 0x44, 0x4c, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0f,
	0x0a, 0x0b, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12,
	0x0e, 0x0a, 0x0a, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x12,
	0x10, 0x0a, 0x0c, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x05, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x52, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f,
	0x56, 0x49, 0x45, 0x57, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f,
	0x56, 0x49, 0x45, 0x57, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x56,
	0x49, 0x45, 0x57, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f,
	0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x52, 0x4f, 0x50, 0x5f,
	0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d,
	0x44, 0x52, 0x4f, 0x50, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12,
	0x14, 0x0a, 0x10, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x44,
	0x55, 0x52, 0x45, 0x10, 0x0e, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x44, 0x55, 0x52, 0x45, 0x10, 0x0f, 0x2a, 0x84, 0x01, 0x0a, 0x0a, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e,
	0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x10, 0x04,
	0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x44,
	0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c,
	0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x08,
	0x42, 0x0b, 0x48, 0x01, 0x5a, 0x07, 0x2e, 0x2f, 0x3b, 0x76, 0x6f, 0x6c, 0x63,
}

var (
	file_volc_proto_rawDescOnce sync.Once
	file_volc_proto_rawDescData = file_volc_proto_rawDesc
)

func file_volc_proto_rawDescGZIP() []byte {
	file_volc_proto_rawDescOnce.Do(func() {
		file_volc_proto_rawDescData = protoimpl.X.CompressGZIP(file_volc_proto_rawDescData)
	})
	return file_volc_proto_rawDescData
}

var file_volc_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_volc_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_volc_proto_goTypes = []interface{}{
	(EntryType)(0),      // 0: volc.EntryType
	(SrcType)(0),        // 1: volc.SrcType
	(DMLType)(0),        // 2: volc.DMLType
	(DDLType)(0),        // 3: volc.DDLType
	(ColumnType)(0),     // 4: volc.ColumnType
	(*Entry)(nil),       // 5: volc.Entry
	(*Prop)(nil),        // 6: volc.Prop
	(*BeginEvent)(nil),  // 7: volc.BeginEvent
	(*CommitEvent)(nil), // 8: volc.CommitEvent
	(*DDLEvent)(nil),    // 9: volc.DDLEvent
	(*DMLEvent)(nil),    // 10: volc.DMLEvent
	(*Index)(nil),       // 11: volc.Index
	(*Row)(nil),         // 12: volc.Row
	(*ColumnDef)(nil),   // 13: volc.ColumnDef
	(*Column)(nil),      // 14: volc.Column
}
var file_volc_proto_depIdxs = []int32{
	6,  // 0: volc.Entry.props:type_name -> volc.Prop
	1,  // 1: volc.Entry.src_type:type_name -> volc.SrcType
	0,  // 2: volc.Entry.entry_type:type_name -> volc.EntryType
	10, // 3: volc.Entry.dml_event:type_name -> volc.DMLEvent
	9,  // 4: volc.Entry.ddl_event:type_name -> volc.DDLEvent
	8,  // 5: volc.Entry.commit_event:type_name -> volc.CommitEvent
	7,  // 6: volc.Entry.begin_event:type_name -> volc.BeginEvent
	6,  // 7: volc.BeginEvent.props:type_name -> volc.Prop
	6,  // 8: volc.CommitEvent.props:type_name -> volc.Prop
	6,  // 9: volc.DDLEvent.props:type_name -> volc.Prop
	3,  // 10: volc.DDLEvent.type:type_name -> volc.DDLType
	2,  // 11: volc.DMLEvent.type:type_name -> volc.DMLType
	11, // 12: volc.DMLEvent.use_index:type_name -> volc.Index
	13, // 13: volc.DMLEvent.column_defs:type_name -> volc.ColumnDef
	12, // 14: volc.DMLEvent.rows:type_name -> volc.Row
	6,  // 15: volc.DMLEvent.props:type_name -> volc.Prop
	14, // 16: volc.Row.before_cols:type_name -> volc.Column
	14, // 17: volc.Row.after_cols:type_name -> volc.Column
	6,  // 18: volc.ColumnDef.props:type_name -> volc.Prop
	4,  // 19: volc.ColumnDef.type:type_name -> volc.ColumnType
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_volc_proto_init() }
func file_volc_proto_init() {
	if File_volc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_volc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Prop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeginEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DDLEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DMLEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Index); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Row); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Column); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_volc_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Entry_DmlEvent)(nil),
		(*Entry_DdlEvent)(nil),
		(*Entry_CommitEvent)(nil),
		(*Entry_BeginEvent)(nil),
	}
	file_volc_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*Column_StringValue)(nil),
		(*Column_BinaryValue)(nil),
		(*Column_FloatValue)(nil),
		(*Column_Int64Value)(nil),
		(*Column_Uint64Value)(nil),
		(*Column_BoolValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_volc_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_volc_proto_goTypes,
		DependencyIndexes: file_volc_proto_depIdxs,
		EnumInfos:         file_volc_proto_enumTypes,
		MessageInfos:      file_volc_proto_msgTypes,
	}.Build()
	File_volc_proto = out.File
	file_volc_proto_rawDesc = nil
	file_volc_proto_goTypes = nil
	file_volc_proto_depIdxs = nil
}
